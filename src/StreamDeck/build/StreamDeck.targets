<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <_invalidUUIDCharsRegex>[^A-Za-z0-9\-\.]+</_invalidUUIDCharsRegex>
        <_author Condition="'$(_author)' == ''">$([System.Text.RegularExpressions.Regex]::Replace('$(Company)', '$(_invalidUUIDCharsRegex)', '').ToLower())</_author>
        <_author Condition="'$(_author)' == ''">$([System.Text.RegularExpressions.Regex]::Replace('$(Authors)', '$(_invalidUUIDCharsRegex)', '').ToLower())</_author>
        <_author Condition="'$(_author)' == ''">$([System.Text.RegularExpressions.Regex]::Replace('$(AssemblyName)', '$(_invalidUUIDCharsRegex)', '').ToLower())</_author>
        <_author Condition="'$(_author)' == ''">user</_author>
        <_name Condition="'$(_name)' == ''">$([System.Text.RegularExpressions.Regex]::Replace('$(Product)', '$(_invalidUUIDCharsRegex)', '').ToLower())</_name>
        <_name Condition="'$(_name)' == ''">$([System.Text.RegularExpressions.Regex]::Replace('$(Title)', '$(_invalidUUIDCharsRegex)', '').ToLower())</_name>
        <_name Condition="'$(_name)' == ''">$([System.Text.RegularExpressions.Regex]::Replace('$(AssemblyName)', '$(_invalidUUIDCharsRegex)', '').ToLower())</_name>
        <_name Condition="'$(_name)' == ''">plugin</_name>

        <StreamDeckPluginPath>$(APPDATA)\Elgato\StreamDeck\Plugins\</StreamDeckPluginPath>
        <PluginDirectoryName>com.$(_author).$(_name).sdPlugin</PluginDirectoryName>
        <PluginPath>$(StreamDeckPluginPath)$(PluginDirectoryName)\</PluginPath>
    </PropertyGroup>

    <!--
        Add the default recommended global usings.
    -->
    <ItemGroup Condition="'$(ImplicitUsings)' != 'disable'">
        <Using Include="Microsoft.Extensions.Hosting" />
        <Using Include="StreamDeck" />
        <Using Include="StreamDeck.Events" />
        <Using Include="StreamDeck.Extensions.Hosting" />
        <Using Include="StreamDeck.Extensions.PropertyInspectors" />
        <Using Include="StreamDeck.Extensions.Routing" />
    </ItemGroup>

    <!--
        Create the default launchSettings.json file; this enables user to debug more easily.
        NB. Ensure we don't override any existing profiles the user might have.
    -->
    <Target Name="WriteDefaultLaunchSettings" BeforeTargets="PreBuildEvent" Condition="!$([System.IO.File]::Exists('$(ProjectDir)Properties\launchSettings.json'))">
        <PropertyGroup>
            <_launchSettingsContents>
                <![CDATA[{
  "profiles": {
    "Debug (Windows)": {
      "commandName": "Executable",
      "executablePath": "%windir%\\system32\\cmd.exe",
      "commandLineArgs": "/S /C \"start \"title\" /B \"%ProgramW6432%\\Elgato\\StreamDeck\\StreamDeck.exe\" \""
    }
  }
}]]>
            </_launchSettingsContents>
        </PropertyGroup>

        <WriteLinesToFile
            File="$(ProjectDir)Properties\launchSettings.json"
            Lines="$(_launchSettingsContents)"
            Overwrite="false"/>
    </Target>

    <!--
        Copy the manifest.json file to the output path.
        NB. This is intentionally not part of the build process; if it were, the source generator would re-run.
    -->
    <Target Name="CopyPluginManifest" Condition="$([System.IO.File]::Exists('$(ProjectDir)manifest.json'))">
        <Copy SourceFiles="manifest.json" DestinationFolder="$(OutputPath)" SkipUnchangedFiles="true" />
    </Target>

    <!--
        Kills the StreamDeck.exe process, allowing the plugin to be copied to the plugins folder.
    -->
    <Target Name="KillStreamDeckProcess">
        <Exec Command="taskkill -f -t -im StreamDeck.exe -fi &quot;status eq running&quot;" />
    </Target>

    <!--
        Deletes all previous plugins, installed as part of this project, from the Stream Deck plugins folder.
    -->
    <Target Name="CleanPluginsFolder" BeforeTargets="Clean" DependsOnTargets="KillStreamDeckProcess">
        <ItemGroup>
            <_previousPluginDirectoryNames Include="$(BaseIntermediateOutputPath)StreamDeck\*.file" />
            <_previousPluginPaths Include="$(StreamDeckPluginPath)%(_previousPluginDirectoryNames.FileName)\" />
            <_previousPluginPaths Remove="$(StreamDeckPluginPath)\" />
            <_previousPluginPaths Remove="$(StreamDeckPluginPath)\..*" />
        </ItemGroup>

        <Message Text="Removing plugin -> %(_previousPluginPaths.Directory)" Importance="high" Condition="'@(_previousPluginPaths->Count())' &gt; 0" />

        <RemoveDir Directories="@(_previousPluginPaths)" />
        <Delete Files="@(_previousPluginDirectoryNames)" />
    </Target>

    <!--
        Copies the output of the build to the Stream Deck plugins folder.
    -->
    <Target Name="CopyFilesToPluginsFolder" AfterTargets="PostBuildEvent" DependsOnTargets="CopyPluginManifest;KillStreamDeckProcess" Condition="'$(PublishProtocol)' == ''">
        <ItemGroup>
            <PluginFilesToCopy Include="$(OutputPath)**\*" />
        </ItemGroup>

        <Message Text="Installing plugin -> $(PluginPath)" Importance="high" />

        <Copy SourceFiles="@(PluginFilesToCopy)" DestinationFiles="$(PluginPath)%(RecursiveDir)%(Filename)%(Extension)" />
        <WriteLinesToFile File="$(BaseIntermediateOutputPath)StreamDeck\$(PluginDirectoryName).file" Lines="" Overwrite="false"/>
    </Target>
</Project>