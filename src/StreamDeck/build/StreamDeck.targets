<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!--
        Add the default recommended global usings.
    -->
    <ItemGroup Condition="'$(ImplicitUsings)' != 'disable'">
        <Using Include="Microsoft.Extensions.Hosting" />
        <Using Include="StreamDeck" />
        <Using Include="StreamDeck.Events" />
        <Using Include="StreamDeck.Extensions.Hosting" />
    </ItemGroup>

    <!--
        Create the default launchSettings.json file; this enables user to debug more easily.
        NB. Ensure we don't override any existing profiles the user might have.
    -->
    <PropertyGroup>
        <LaunchSettingsFilePath>$(ProjectDir)Properties\launchSettings.json</LaunchSettingsFilePath>
        <PluginManifestFilePath>$(ProjectDir)\manifest.json</PluginManifestFilePath>
    </PropertyGroup>

    <Target Name="WriteDefaultLaunchSettings" BeforeTargets="PreBuildEvent" Condition="!$([System.IO.File]::Exists('$(LaunchSettingsFilePath)'))">
        <PropertyGroup>
            <_launchSettingsContents>
                <![CDATA[{
  "profiles": {
    "Debug (Windows)": {
      "commandName": "Executable",
      "executablePath": "%windir%\\system32\\cmd.exe",
      "commandLineArgs": "/S /C \"start \"title\" /B \"%ProgramW6432%\\Elgato\\StreamDeck\\StreamDeck.exe\" \""
    }
  }
}]]>
            </_launchSettingsContents>
        </PropertyGroup>

        <WriteLinesToFile
          File="$(LaunchSettingsFilePath)"
          Lines="$(_launchSettingsContents)"
          Overwrite="false"/>
    </Target>

    <!--
        Configure the output path; this enables the plugin to be installed and run seamless during debugging.
        NB. When an output path is already specified, do nothing.
    -->
    <Target Name="UpdateOutPathToPluginsFolder"
            BeforeTargets="PrepareForBuild"
            Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU' And ('$(OutputPath)' == 'bin\$(Configuration)\$(TargetFramework)\' Or '$(OutputPath)' == 'bin\$(Configuration)\')">
        <PropertyGroup>
            <InvalidUUIDCharsRegex>[^A-Za-z0-9\-\.]+</InvalidUUIDCharsRegex>
            <Author Condition="'$(Author)' != ''">$([System.Text.RegularExpressions.Regex]::Replace('$(Author)', '$(InvalidUUIDCharsRegex)', '').ToLower())</Author>
            <Author Condition="'$(Author)' == ''">user</Author>
            <Name Condition="'$(Name)' != ''">$([System.Text.RegularExpressions.Regex]::Replace('$(Name)', '$(InvalidUUIDCharsRegex)', '').ToLower())</Name>
            <Name Condition="'$(Name)' == ''">plugin</Name>
            <OutputPath>$(APPDATA)\Elgato\StreamDeck\Plugins\com.$(Author).$(Name).sdPlugin\</OutputPath>
            <OutDir>$(OutputPath)</OutDir>
            <TargetDir>$(OutputPath)</TargetDir>
            <ProjectDepsFilePath>$(OutputPath)$(ProjectDepsFileName)</ProjectDepsFilePath>
            <ProjectRuntimeConfigFilePath>$(OutputPath)$(ProjectRuntimeConfigFileName)</ProjectRuntimeConfigFilePath>
        </PropertyGroup>

        <Message Text="Installing plugin -> $(OutputPath)" Importance="high" />
    </Target>

    <!--
        Kill the Stream Deck process when installing directly to the plugins folder.
    -->
    <Target Name="KillStreamDeckProcess" BeforeTargets="PreBuildEvent" Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU' And $(OutputPath.Contains('Elgato\StreamDeck\Plugins'))">
        <Exec Command="taskkill -f -t -im StreamDeck.exe -fi &quot;status eq running&quot;" />
    </Target>

    <!--
        Copy the manifest.json to the output path.
        NB. This is deliberately not part of the build process; if it were, the source generator would re-run.
    -->
    <Target Name="GeneratePluginManifest" AfterTargets="PostBuildEvent" Condition="$([System.IO.File]::Exists('$(PluginManifestFilePath)'))">
        <Copy SourceFiles="manifest.json" DestinationFolder="$(OutputPath)" SkipUnchangedFiles="true" />
    </Target>

    <!--
        Copy the manifest.json to the publish directory after publishing the plugin.
    -->
    <Target Name="GeneratePluginManifestForPublish" AfterTargets="Publish" Condition="$([System.IO.File]::Exists('$(PluginManifestFilePath)'))">
        <Copy SourceFiles="manifest.json" DestinationFolder="$(PublishDir)" SkipUnchangedFiles="true" />
    </Target>

</Project>