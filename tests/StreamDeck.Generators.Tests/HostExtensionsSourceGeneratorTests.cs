namespace StreamDeck.Generators.Tests
{
    using StreamDeck.Generators.Tests.Helpers;

    /// <summary>
    /// Provides assertions for <see cref="HostExtensionsSourceGenerator"/>.
    /// </summary>
    [TestFixture]
    internal class HostExtensionsSourceGeneratorTests
    {
        /// <summary>
        /// The expected hint hame.
        /// </summary>
        private const string HINT_HAME = "StreamDeck.Generators\\StreamDeck.Generators.HostExtensionsSourceGenerator\\HostExtensions.g.cs";

        /// <summary>
        /// The empty source text.
        /// </summary>
        private const string EMPTY_SOURCE_TEXT = $$"""
            // <auto-generated />

            namespace StreamDeck.Extensions.Routing
            {
                using global::Microsoft.Extensions.Hosting;

                public static class GeneratedHostExtensions
                {
                    /// <summary>
                    /// Maps all actions based on their UUID to the plugin.
                    /// </summary>
                    /// <param name="host">The <see cref="IHost"/> to configure.</param>
                    /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                    public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                    {
                        // Auto generated actions from their ActionAttribute.
                        {{""}}
                        return host;
                    }

                    /// <summary>
                    /// Maps all actions based on their UUID, and runs the plugin
                    /// </summary>
                    /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                    public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                        => host.MapActions().Run();
                }
            }
            """;

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> does not map when nothing can be mapped.
        /// </summary>
        [TestCase(TestName = "No manifest or actions")]
        public void Empty()
        {
            // Arrange, act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText: "");

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: EMPTY_SOURCE_TEXT
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> does not map when nothing can be mapped.
        /// </summary>
        [TestCase(TestName = "Incorrect base class")]
        [Test]
        public void IncorrectBaseClass()
        {
            // Arrange
            const string sourceText = """
                    using StreamDeck;

                    namespace Foo
                    {
                        [Action]
                        public class MyAction
                        {
                            public MyAction(ActionInitializationContext context) { }
                        }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: EMPTY_SOURCE_TEXT
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> maps when the UUID is not specified, but could be calculated.
        /// </summary>
        [TestCase(TestName = "Action without UUID, or manifest")]
        public void ActionWithoutUUID()
        {
            // Arrange.
            const string sourceText = """
                    using StreamDeck;

                    namespace Foo
                    {
                        [Action]
                        public class MyAction : StreamDeck.StreamDeckAction
                        {
                            public MyAction(ActionInitializationContext context) { }
                        }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: """
                    // <auto-generated />

                    namespace StreamDeck.Extensions.Routing
                    {
                        using global::Microsoft.Extensions.Hosting;

                        public static class GeneratedHostExtensions
                        {
                            /// <summary>
                            /// Maps all actions based on their UUID to the plugin.
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure.</param>
                            /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                            public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                            {
                                // Auto generated actions from their ActionAttribute.
                                host.MapAction<global::Foo.MyAction>("com.testproject.testproject.myaction");

                                return host;
                            }

                            /// <summary>
                            /// Maps all actions based on their UUID, and runs the plugin
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                            public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                                => host.MapActions().Run();
                        }
                    }
                    """
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> maps for a single action with a valid UUID.
        /// </summary>
        [TestCase(TestName = "Action with UUID")]
        public void ActionWithUUID()
        {
            // Arrange.
            const string sourceText = """
                    using StreamDeck;

                    namespace Foo
                    {
                        [Action(UUID = "com.user.tests.my-action")]
                        public class MyAction : StreamDeck.StreamDeckAction
                        {
                            public MyAction(ActionInitializationContext context) { }
                        }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: """
                    // <auto-generated />

                    namespace StreamDeck.Extensions.Routing
                    {
                        using global::Microsoft.Extensions.Hosting;

                        public static class GeneratedHostExtensions
                        {
                            /// <summary>
                            /// Maps all actions based on their UUID to the plugin.
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure.</param>
                            /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                            public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                            {
                                // Auto generated actions from their ActionAttribute.
                                host.MapAction<global::Foo.MyAction>("com.user.tests.my-action");

                                return host;
                            }

                            /// <summary>
                            /// Maps all actions based on their UUID, and runs the plugin
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                            public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                                => host.MapActions().Run();
                        }
                    }
                    """
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> maps for a single action without a UUID, but a manifest.
        /// </summary>
        [TestCase(TestName = "Action without UUID, but manifest")]
        public void ActionWithoutUUIDButManifest()
        {
            // Arrange.
            const string sourceText = """
                    using StreamDeck;

                    [assembly: Manifest]

                    namespace Foo
                    {
                        [Action]
                        public class MyAction : StreamDeck.StreamDeckAction
                        {
                            public MyAction(ActionInitializationContext context) { }
                        }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: """
                    // <auto-generated />

                    namespace StreamDeck.Extensions.Routing
                    {
                        using global::Microsoft.Extensions.Hosting;

                        public static class GeneratedHostExtensions
                        {
                            /// <summary>
                            /// Maps all actions based on their UUID to the plugin.
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure.</param>
                            /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                            public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                            {
                                // Auto generated actions from their ActionAttribute.
                                host.MapAction<global::Foo.MyAction>("com.testproject.testproject.myaction");

                                return host;
                            }

                            /// <summary>
                            /// Maps all actions based on their UUID, and runs the plugin
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                            public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                                => host.MapActions().Run();
                        }
                    }
                    """
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> maps for a single action without a UUID, but a manifest with a <see cref="System.Reflection.AssemblyCompanyAttribute"/>.
        /// </summary>
        [TestCase(TestName = "Action without UUID, but manifest with company attribute")]
        public void ActionWithoutUUIDButManifestWithCompany()
        {
            // Arrange.
            const string sourceText = """
                    using StreamDeck;

                    [assembly: Manifest]
                    [assembly: System.Reflection.AssemblyCompany("Bob Smith")]

                    namespace Foo
                    {
                        [Action]
                        public class MyAction : StreamDeck.StreamDeckAction
                        {
                            public MyAction(ActionInitializationContext context) { }
                        }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: """
                    // <auto-generated />

                    namespace StreamDeck.Extensions.Routing
                    {
                        using global::Microsoft.Extensions.Hosting;

                        public static class GeneratedHostExtensions
                        {
                            /// <summary>
                            /// Maps all actions based on their UUID to the plugin.
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure.</param>
                            /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                            public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                            {
                                // Auto generated actions from their ActionAttribute.
                                host.MapAction<global::Foo.MyAction>("com.bobsmith.testproject.myaction");

                                return host;
                            }

                            /// <summary>
                            /// Maps all actions based on their UUID, and runs the plugin
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                            public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                                => host.MapActions().Run();
                        }
                    }
                    """
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> maps multiple actions.
        /// </summary>
        [TestCase(TestName = "Multiple actions")]
        public void MultipleActions()
        {
            // Arrange.
            const string sourceText = """
                    using StreamDeck;

                    [assembly: Manifest]

                    namespace Foo
                    {
                        [Action]
                        public class ActionOne : StreamDeck.StreamDeckAction
                        {
                            public ActionOne(ActionInitializationContext context) { }
                        }
                    }

                    [Action(UUID = "com.foo.tests.actiontwo")]
                    public class ActionTwo : StreamDeck.StreamDeckAction
                    {
                        public ActionTwo(ActionInitializationContext context) { }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: """
                    // <auto-generated />

                    namespace StreamDeck.Extensions.Routing
                    {
                        using global::Microsoft.Extensions.Hosting;

                        public static class GeneratedHostExtensions
                        {
                            /// <summary>
                            /// Maps all actions based on their UUID to the plugin.
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure.</param>
                            /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                            public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                            {
                                // Auto generated actions from their ActionAttribute.
                                host.MapAction<global::Foo.ActionOne>("com.testproject.testproject.actionone");
                                host.MapAction<global::ActionTwo>("com.foo.tests.actiontwo");

                                return host;
                            }

                            /// <summary>
                            /// Maps all actions based on their UUID, and runs the plugin
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                            public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                                => host.MapActions().Run();
                        }
                    }
                    """
                ));
        }

        /// <summary>
        /// Asserts <see cref="HostExtensionsSourceGenerator"/> ignores actions flagged with [DoNotMap].
        /// </summary>
        [TestCase(TestName = "Ignore when DoNotMapAttribute is present")]
        public void IgnoredWithDoNotMapAction()
        {
            // Arrange.
            const string sourceText = """
                    using StreamDeck;

                    [DoNotMap]
                    [Action(UUID = "com.user.tests.action")]
                    public class NonMappedAction : StreamDeck.StreamDeckAction
                    {
                        public NonMappedAction(ActionInitializationContext context) { }
                    }

                    [Action(UUID = "com.user.tests.action")]
                    public class ValidAction : StreamDeck.StreamDeckAction
                    {
                        public ValidAction(ActionInitializationContext context) { }
                    }
                    """;

            // Act.
            var (compilation, _) = SourceGeneratorTests.Run(new HostExtensionsSourceGenerator(), sourceText);

            // Assert.
            SourceGeneratorTests.VerifySources(
                compilation,
                (
                    HintName: HINT_HAME,
                    SourceText: """
                    // <auto-generated />

                    namespace StreamDeck.Extensions.Routing
                    {
                        using global::Microsoft.Extensions.Hosting;

                        public static class GeneratedHostExtensions
                        {
                            /// <summary>
                            /// Maps all actions based on their UUID to the plugin.
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure.</param>
                            /// <returns>The same instance of the <see cref="IHost"/> for chaining.</returns>
                            public static global::Microsoft.Extensions.Hosting.IHost MapActions(this global::Microsoft.Extensions.Hosting.IHost host)
                            {
                                // Auto generated actions from their ActionAttribute.
                                host.MapAction<global::ValidAction>("com.user.tests.action");

                                return host;
                            }

                            /// <summary>
                            /// Maps all actions based on their UUID, and runs the plugin
                            /// </summary>
                            /// <param name="host">The <see cref="IHost"/> to configure and run.</param>
                            public static void RunPlugin(this global::Microsoft.Extensions.Hosting.IHost host)
                                => host.MapActions().Run();
                        }
                    }
                    """
                ));
        }
    }
}
